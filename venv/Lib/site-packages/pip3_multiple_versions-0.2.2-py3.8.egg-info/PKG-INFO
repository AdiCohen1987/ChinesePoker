Metadata-Version: 2.1
Name: pip3-multiple-versions
Version: 0.2.2
Summary: Install many versions of the same Python package with pip3 support.
Home-page: https://github.com/dmytrostriletskyi/pip3-multiple-versions
Author: Dmytro Striletskyi
Author-email: dmytro.striletskyi@gmail.com
License: MIT
Description: Install many versions of the same Python package with pip3 support. 
        
        * [Getting started](#getting-started)
          * [Technical stack](#technical-stack)
          * [Requirements](#requirements)
          * [Installation](#installation)
        * [Usage](#usage)
          * [Example](#example)
          * [Versions](#versions)
          * [Command line interface](#command-line-interface)
            * [Version](#version)
            * [Help](#help)
            * [Install](#install)
        * [How it works](#how-it-works)
          * [Benchmark](#benchmark)
        * [Troubleshootings](#troubleshootings)
          * [Unknown module folder](#unknown-module-folder)
        * [Development](#development)
          * [Clone the project](#clone-the-project)
          * [Distribution](#distribution)
        
        ## Getting started
        
        ### Technical stack
        
        1. [Python3](https://www.python.org/downloads) as an interpreter (programming language) to execute the code.
           * The following list of versions has been tested: `3.4`, `3.5`, `3.6`, `3.7`.
        
        ### Requirements
        
        1. [Git](https://git-scm.com) as a version control system to work with current repository.
        2. [pip](https://pip.pypa.io/en/stable) as a package manager for `Python`.
        
        ### Installation
        
        Install using `pip3`:
        
        ```bash
        $ pip3 install pip3-multiple-versions
        ```
        
        ## Usage
        
        ### Example
        
        Install multiple version of the same package with the following commands:
        
        ```bash
        $ pip3-multiple-versions package install --name=requests --version=1.0.0
        $ pip3-multiple-versions package install --name=requests --version=2.0.0
        ```
        
        Use any of them:
        
        ```python
        import multiple_versions
        multiple_versions.use(name='requests', version='1.0.0')
        
        import requests
        print(requests.__version__)
        '1.0.0'
        ```
        
        Or another one:
        
        ```python
        import multiple_versions
        multiple_versions.use(name='requests', version='2.0.0')
        
        import requests
        print(requests.__version__)
        '2.0.0'
        ```
        
        ### Versions
        
        To specify particular version, use the function named `use` from `multiple_versions`. You should define `use` function 
        strictly before importing a target library:
        
        ```python
        import multiple_versions
        multiple_versions.use(name='requests', version='2.0.0')
        
        import requests
        ```
        
        ### Distribution 
        
        Distribution functionality ([pkg_resources](https://setuptools.readthedocs.io/en/latest/pkg_resources.html)) is 
        supported by default:
        
        ```python
        import multiple_versions
        multiple_versions.use(name='requests', version='2.0.0')
        import requests
        
        import pkg_resources
        print(pkg_resources.get_distribution('requests').version)
        2.0.0
        ```
        
        ### Command line interface 
        
        #### Version
        
        Get the version of the package â€” `pip3-multiple-versions --version`:
        
        ```bash
        $ pip3-multiple-versions --version
        pip3-multiple-versions, version 0.0.1
        ```
        
        #### Help
        
        Get the detailed description of all supported commands by the package â€” `pip3-multiple-versions --help`:
        
        ```bash
        $ pip3-multiple-versions --help
        Usage: pip3-multiple-versions [OPTIONS] COMMAND [ARGS]...
        
          Provide command-line interface for pip3 package's multiple versions.
        
        Options:
          --version  Show the version and exit.
          --help     Show this message and exit.
        ```
        
        #### Install
        
        Install a package â€” `pip3-multiple-versions package install`.
        
        You can install as many version as you wish.
        
        | Arguments       | Type    | Required | Restrictions                      | Description                                            |
        |:---------------:|:-------:|:--------:|:---------------------------------:|--------------------------------------------------------|
        | name            | String  | Yes      | -                                 | Name of a package.                                     |
        | version         | String  | Yes      | -                                 | Version of a package.                                  |
        | extra-index-url | String  | No       | May contain authentication token. | URL to extra Python Package Index. May be private one. |
        
        
        ```bash
        $ pip3-multiple-versions package install \
              --name=requests \
              --version=2.0.0 \
              --extra-index-url=https://${AUTHENTICATION_TOKEN}:@${GEMFURY_PRIVATE_REPOSITORY}
        ```
        
        ## How it works
        
        ### Benchmark
        
        Any cache system from `Python` is not used and the library does not decrease speed of imports call.
        
        Performance without multiple versions calling:
        
        ```bash
        $ python3 -mtimeit -s "import requests"
        50000000 loops, best of 5: 6.62 nsec per loop
        ```
        
        Performance with multiple versions calling:
        
        ```bash
        $ python3 -mtimeit -s "import multiple_versions; multiple_versions.use(name='requests', version='2.0.0'); import requests"
        50000000 loops, best of 5: 6.56 nsec per loop
        ```
        
        ## Troubleshootings
        
        ### Unknown module folder
        
        You may get the unknown module folder error illustrated below.
        
        ```bash
        Traceback (most recent call last):
          File "test.py", line 45, in <module>
            multiple_versions.use(name='requests', version='2.0.0')
          File "/Users/dmytro/projects/pip3-multiple-versions/multiple_versions/main.py", line 140, in use
            imported_package_folder = _get_imported_package_folder(package_name=name, package_version=version)
          File "/Users/dmytro/projects/pip3-multiple-versions/multiple_versions/main.py", line 112, in _get_imported_package_folder
            raise ModuleNotFoundError('Unknown module folder, package name is different from package folder name.')
        ModuleNotFoundError: Unknown module folder, package name is different from package folder name.
        ```
        
        It means, that the project name is different from package folder name. After installation this kind of projects, you have:
        
        1. Package folder you do imports from.
        
            ```python
            import rest_framework
            ```
        
        2. Folder with [meta data from setup.py](https://packaging.python.org/tutorials/packaging-projects/#creating-setup-py) such
        as version, description, etc.
        
            ```bash
            $ ls /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages
            ...
            rest_framework
            djangorestframework-3.11.0-py3.7.egg-info
            ...
            ```
        
        And the point is that `multiple_versions.use` under the hood requires data for both of them and the problem is these
        different names â€” `djangorestframework` (package name while installing) and `rest_framework` (package folder name).
        
        The library easily parse package name, but not package folder name. The solution is to use `import_name` variable to be
        passed to `multiple_versions.use`.
        
        ```python
        import multiple_versions
        multiple_versions.use(name='djangorestframework', version='3.11.0', import_name='rest_framework')
        
        import rest_framework
        ```
        
        You don't need `import_name` variable in case package name and package folder name is the same:
        
        ```bash
        $ ls /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages
        ...
        marshmallow
        marshmallow-3.3.0.dist-info
        typing_inspect
        typing_inspect-0.4.0.dist-info
        ...
        ```
        
        ## Development
        
        ### Clone the project
        
        To start working with the project, clone it with the following commands.
        
        ```bash
        $ git clone git@github.com:dmytrostriletskyi/pip3-multiple-versions.git
        $ cd dmytrostriletskyi/pip3-multiple-versions
        ```
        
        Install requirements:
        
        ```bash
        $ pip3 install -r requirements/project.txt -r requirements/tests.txt
        ```
        
        ### Run tests
        
        ```bash
        $ pytest tests
        ```
        
        ### Distribution
        
        Build the project with the following command:
        
        ```bash
        $ python3 setup.py sdist
        ```
        
        Install it locally:
        
        ```bash
        $ pip3 install dist/*.tar.gz
        ```
        
        After the command above, you can execute the command line interface as if you installed it through `pip3`:
        
        ```bash
        $ pip3-multiple-versions --version
        pip3-multiple-versions, version 0.0.1
        ```
        
Platform: UNKNOWN
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Description-Content-Type: text/markdown
